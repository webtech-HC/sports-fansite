name: Update scoreboard.json (CFBD)

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"   # ~every 5 minutes

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: scoreboard
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch TN scoreboard from CFBD
        env:
          CFBD_KEY: ${{ secrets.CFBD_KEY }}
        run: |
          set -euo pipefail

          # 1) Primary: near-live scoreboard (filter by team)
          curl -fsSL "https://api.collegefootballdata.com/scoreboard?classification=fbs&team=Tennessee" \
            -H "Authorization: Bearer ${CFBD_KEY}" \
            -o tmp-score.json

          node <<'NODE'
          const fs = require('fs');

          function mapStatus(s='') {
            s = s.toLowerCase();
            if (s.includes('in progress')) return 'in_progress';
            if (s.includes('final'))        return 'final';
            if (s.includes('scheduled') || s==='pre') return 'pre';
            if (s.includes('postponed'))   return 'postponed';
            if (s.includes('canceled'))    return 'canceled';
            return 'none';
          }

          function normalizeFromScoreboard(arr) {
            const isTN = s => (s||'').toLowerCase().includes('tennessee');
            const g = (Array.isArray(arr)?arr:[]).find(x => isTN(x.home_team) || isTN(x.away_team));
            if (!g) return null;
            return {
              status: mapStatus(g.status),
              home: { name: g.home_team, score: g.home_points ?? '' },
              away: { name: g.away_team, score: g.away_points ?? '' },
              clock: g.period ? `Q${g.period} ${g.clock ?? ''}` : (g.clock ?? ''),
              start: g.start_date || null
            };
          }

          let arr = [];
          try { arr = JSON.parse(fs.readFileSync('tmp-score.json','utf8')); } catch {}
          let out = normalizeFromScoreboard(arr) || { status:'none' };

          fs.mkdirSync('data', { recursive: true });
          fs.writeFileSync('data/scoreboard.json', JSON.stringify(out, null, 2));
          NODE

      - name: Create/update PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: bots/scoreboard
          title: "scoreboard: refresh"
          commit-message: "scoreboard: refresh"
          add-paths: |
            data/scoreboard.json
          delete-branch: true
